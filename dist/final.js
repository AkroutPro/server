(()=>{var e={591:(e,s,t)=>{t(818).config();const{Sequelize:r}=t(31),o=new r(process.env.DB_NAME,process.env.DB_USER,process.env.DB_PASSWORD,{host:process.env.DB_HOST,dialect:process.env.DB_DIALECT,port:process.env.DB_PORT||5435});e.exports=o},244:(e,s,t)=>{const{User:r}=t(760);s.createUser=async(e,s)=>{try{const t=await r.create(e.body);s.status(201).json(t)}catch(e){s.status(400).json({error:e.message})}},s.getUsers=async(e,s)=>{try{const e=await r.findAll();s.status(200).json(e)}catch(e){s.status(500).json({error:e.message})}},s.getUserById=async(e,s)=>{try{const t=await r.findByPk(e.params.id);t?s.status(200).json(t):s.status(404).json({error:"User not found"})}catch(e){s.status(500).json({error:e.message})}},s.updateUser=async(e,s)=>{try{const[t]=await r.update(e.body,{where:{id:e.params.id}});if(t){const t=await r.findByPk(e.params.id);s.status(200).json(t)}else s.status(404).json({error:"User not found"})}catch(e){s.status(500).json({error:e.message})}},s.deleteUser=async(e,s)=>{try{await r.destroy({where:{id:e.params.id}})?s.status(204).send():s.status(404).json({error:"User not found"})}catch(e){s.status(500).json({error:e.message})}}},760:(e,s,t)=>{const r=t(591),o=t(805);r.sync({alter:!0}).then((()=>console.log("Database synced"))).catch((e=>console.error("Error syncing database:",e))),e.exports={User:o}},805:(e,s,t)=>{const{DataTypes:r}=t(31),o=t(591).define("User",{name:{type:r.STRING,allowNull:!1},email:{type:r.STRING,allowNull:!1,unique:!0}});e.exports=o},67:(e,s,t)=>{const r=t(252).Router(),o=t(244);r.post("/users",o.createUser),r.get("/users",o.getUsers),r.get("/users/:id",o.getUserById),r.put("/users/:id",o.updateUser),r.delete("/users/:id",o.deleteUser),e.exports=r},577:e=>{"use strict";e.exports=require("cors")},818:e=>{"use strict";e.exports=require("dotenv")},252:e=>{"use strict";e.exports=require("express")},31:e=>{"use strict";e.exports=require("sequelize")}},s={};function t(r){var o=s[r];if(void 0!==o)return o.exports;var a=s[r]={exports:{}};return e[r](a,a.exports,t),a.exports}t(818).config();const r=t(252),o=r(),a=t(67),n=t(591),c=t(577);o.use(c()),o.use(r.json()),o.use("/api",a),n.authenticate().then((()=>{console.log("Connected to PostgreSQL"),o.listen(3001,(()=>{console.log("Server running on http://localhost:3001")}))})).catch((e=>console.error("Unable to connect to database:",e)))})();